%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.9
%% Version source: git
-module(kvstore_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_set_response.error_t'/1, 'enum_value_by_symbol_set_response.error_t'/1]).
-export(['enum_symbol_by_value_get_response.error_t'/1, 'enum_value_by_symbol_get_response.error_t'/1]).
-export(['enum_symbol_by_value_req_envelope.msg_type'/1, 'enum_value_by_symbol_req_envelope.msg_type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("kvstore_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'set_response.error_t'() :: ok | internal.
-type 'get_response.error_t'() :: ok | not_found | internal.
-type 'req_envelope.msg_type'() :: set_request_t | set_response_t | get_request_t | get_response_t.
-export_type(['set_response.error_t'/0, 'get_response.error_t'/0, 'req_envelope.msg_type'/0]).

%% message types
-type data() :: #data{}.

-type set_request() :: #set_request{}.

-type set_response() :: #set_response{}.

-type get_request() :: #get_request{}.

-type get_response() :: #get_response{}.

-type req_envelope() :: #req_envelope{}.

-export_type(['data'/0, 'set_request'/0, 'set_response'/0, 'get_request'/0, 'get_response'/0, 'req_envelope'/0]).
-type '$msg_name'() :: data | set_request | set_response | get_request | get_response | req_envelope.
-type '$msg'() :: data() | set_request() | set_response() | get_request() | get_response() | req_envelope().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        data -> encode_msg_data(id(Msg, TrUserData), TrUserData);
        set_request -> encode_msg_set_request(id(Msg, TrUserData), TrUserData);
        set_response -> encode_msg_set_response(id(Msg, TrUserData), TrUserData);
        get_request -> encode_msg_get_request(id(Msg, TrUserData), TrUserData);
        get_response -> encode_msg_get_response(id(Msg, TrUserData), TrUserData);
        req_envelope -> encode_msg_req_envelope(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_data(Msg, TrUserData) -> encode_msg_data(Msg, <<>>, TrUserData).


encode_msg_data(#data{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end.

encode_msg_set_request(Msg, TrUserData) -> encode_msg_set_request(Msg, <<>>, TrUserData).


encode_msg_set_request(#set_request{req = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_mfield_set_request_req(TrF1, <<Bin/binary, 10>>, TrUserData) end.

encode_msg_set_response(Msg, TrUserData) -> encode_msg_set_response(Msg, <<>>, TrUserData).


encode_msg_set_response(#set_response{error = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), 'e_enum_set_response.error_t'(TrF1, <<Bin/binary, 8>>, TrUserData) end.

encode_msg_get_request(Msg, TrUserData) -> encode_msg_get_request(Msg, <<>>, TrUserData).


encode_msg_get_request(#get_request{key = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end.

encode_msg_get_response(Msg, TrUserData) -> encode_msg_get_response(Msg, <<>>, TrUserData).


encode_msg_get_response(#get_response{error = F1, req = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), 'e_enum_get_response.error_t'(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_mfield_get_response_req(TrF2, <<B1/binary, 18>>, TrUserData) end
    end.

encode_msg_req_envelope(Msg, TrUserData) -> encode_msg_req_envelope(Msg, <<>>, TrUserData).


encode_msg_req_envelope(#req_envelope{type = F1, set_req = F2, set_resp = F3, get_req = F4, get_resp = F5}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), 'e_enum_req_envelope.msg_type'(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_mfield_req_envelope_set_req(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_mfield_req_envelope_set_resp(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_mfield_req_envelope_get_req(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_mfield_req_envelope_get_resp(TrF5, <<B4/binary, 42>>, TrUserData) end
    end.

e_mfield_set_request_req(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_get_response_req(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_data(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_envelope_set_req(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_set_request(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_envelope_set_resp(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 2>>,
    encode_msg_set_response(Msg, Bin2, TrUserData).

e_mfield_req_envelope_get_req(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_get_request(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_envelope_get_resp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_get_response(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_set_response.error_t'(ok, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_set_response.error_t'(internal, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_set_response.error_t'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_get_response.error_t'(ok, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_get_response.error_t'(not_found, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_get_response.error_t'(internal, Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_get_response.error_t'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_req_envelope.msg_type'(set_request_t, Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_req_envelope.msg_type'(set_response_t, Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_req_envelope.msg_type'(get_request_t, Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_req_envelope.msg_type'(get_response_t, Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_req_envelope.msg_type'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(data, Bin, TrUserData) -> id(decode_msg_data(Bin, TrUserData), TrUserData);
decode_msg_2_doit(set_request, Bin, TrUserData) -> id(decode_msg_set_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(set_response, Bin, TrUserData) -> id(decode_msg_set_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(get_request, Bin, TrUserData) -> id(decode_msg_get_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(get_response, Bin, TrUserData) -> id(decode_msg_get_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(req_envelope, Bin, TrUserData) -> id(decode_msg_req_envelope(Bin, TrUserData), TrUserData).



decode_msg_data(Bin, TrUserData) -> dfp_read_field_def_data(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_data(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_data_key(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_data(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_data_value(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_data(<<>>, 0, 0, _, F@_1, F@_2, _) -> #data{key = F@_1, value = F@_2};
dfp_read_field_def_data(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_data(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_data(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_data_key(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_data_value(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_data(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_data(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_data(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_data(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_data(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_data(<<>>, 0, 0, _, F@_1, F@_2, _) -> #data{key = F@_1, value = F@_2}.

d_field_data_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_data_key(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_data_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_data(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_data_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_data_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_data_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_data(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_data(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_data(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_data(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_data(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_data(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_data(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_data(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_data(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_data(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_data(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_data(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_set_request(Bin, TrUserData) -> dfp_read_field_def_set_request(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_set_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_set_request_req(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_set_request(<<>>, 0, 0, _, F@_1, _) -> #set_request{req = F@_1};
dfp_read_field_def_set_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_set_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_set_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_set_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_set_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_set_request_req(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_set_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_set_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_set_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_set_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_set_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_set_request(<<>>, 0, 0, _, F@_1, _) -> #set_request{req = F@_1}.

d_field_set_request_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_set_request_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_set_request_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_data(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_set_request(RestF,
                                   0,
                                   0,
                                   F,
                                   if Prev == undefined -> NewFValue;
                                      true -> merge_msg_data(Prev, NewFValue, TrUserData)
                                   end,
                                   TrUserData).

skip_varint_set_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_set_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_set_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_set_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_set_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_set_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_set_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_set_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_set_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_set_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_set_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_set_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_set_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_set_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_set_response(Bin, TrUserData) -> dfp_read_field_def_set_response(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_set_response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_set_response_error(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_set_response(<<>>, 0, 0, _, F@_1, _) -> #set_response{error = F@_1};
dfp_read_field_def_set_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_set_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_set_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_set_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_set_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_set_response_error(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_set_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_set_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_set_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_set_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_set_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_set_response(<<>>, 0, 0, _, F@_1, _) -> #set_response{error = F@_1}.

d_field_set_response_error(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_set_response_error(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_set_response_error(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_set_response.error_t'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_set_response(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_set_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_set_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_set_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_set_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_set_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_set_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_set_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_set_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_set_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_set_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_set_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_set_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_set_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_set_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_get_request(Bin, TrUserData) -> dfp_read_field_def_get_request(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_get_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_get_request_key(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_get_request(<<>>, 0, 0, _, F@_1, _) -> #get_request{key = F@_1};
dfp_read_field_def_get_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_get_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_get_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_get_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_get_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_get_request_key(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_get_request(<<>>, 0, 0, _, F@_1, _) -> #get_request{key = F@_1}.

d_field_get_request_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_get_request_key(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_get_request_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_get_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_get_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_get_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_get_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_get_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_get_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_get_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_get_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_get_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_get_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_get_response(Bin, TrUserData) -> dfp_read_field_def_get_response(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_get_response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_get_response_error(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_get_response(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_get_response_req(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_get_response(<<>>, 0, 0, _, F@_1, F@_2, _) -> #get_response{error = F@_1, req = F@_2};
dfp_read_field_def_get_response(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_get_response(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_get_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_get_response(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_get_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_get_response_error(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_get_response_req(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_get_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_get_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_get_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_get_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_get_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_get_response(<<>>, 0, 0, _, F@_1, F@_2, _) -> #get_response{error = F@_1, req = F@_2}.

d_field_get_response_error(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_get_response_error(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_get_response_error(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_get_response.error_t'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_get_response(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_get_response_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_get_response_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_get_response_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_data(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_get_response(RestF,
                                    0,
                                    0,
                                    F,
                                    F@_1,
                                    if Prev == undefined -> NewFValue;
                                       true -> merge_msg_data(Prev, NewFValue, TrUserData)
                                    end,
                                    TrUserData).

skip_varint_get_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_get_response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_get_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_get_response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_get_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_get_response(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_get_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_response(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_get_response(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_response(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_get_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_get_response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_get_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_get_response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_req_envelope(Bin, TrUserData) -> dfp_read_field_def_req_envelope(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req_envelope(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_req_envelope_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req_envelope(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_req_envelope_set_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req_envelope(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_req_envelope_set_resp(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req_envelope(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_req_envelope_get_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req_envelope(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_req_envelope_get_resp(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req_envelope(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #req_envelope{type = F@_1, set_req = F@_2, set_resp = F@_3, get_req = F@_4, get_resp = F@_5};
dfp_read_field_def_req_envelope(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_req_envelope(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_req_envelope(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_req_envelope(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_req_envelope(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_req_envelope_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_req_envelope_set_req(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_req_envelope_set_resp(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_req_envelope_get_req(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_req_envelope_get_resp(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_req_envelope(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_req_envelope(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_req_envelope(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_req_envelope(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_req_envelope(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_req_envelope(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #req_envelope{type = F@_1, set_req = F@_2, set_resp = F@_3, get_req = F@_4, get_resp = F@_5}.

d_field_req_envelope_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_req_envelope_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_req_envelope_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_req_envelope.msg_type'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_req_envelope(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_req_envelope_set_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_req_envelope_set_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_req_envelope_set_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_set_request(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_req_envelope(RestF,
                                    0,
                                    0,
                                    F,
                                    F@_1,
                                    if Prev == undefined -> NewFValue;
                                       true -> merge_msg_set_request(Prev, NewFValue, TrUserData)
                                    end,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

d_field_req_envelope_set_resp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_req_envelope_set_resp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_req_envelope_set_resp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_set_response(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_req_envelope(RestF,
                                    0,
                                    0,
                                    F,
                                    F@_1,
                                    F@_2,
                                    if Prev == undefined -> NewFValue;
                                       true -> merge_msg_set_response(Prev, NewFValue, TrUserData)
                                    end,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

d_field_req_envelope_get_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_req_envelope_get_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_req_envelope_get_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_get_request(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_req_envelope(RestF,
                                    0,
                                    0,
                                    F,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    if Prev == undefined -> NewFValue;
                                       true -> merge_msg_get_request(Prev, NewFValue, TrUserData)
                                    end,
                                    F@_5,
                                    TrUserData).

d_field_req_envelope_get_resp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_req_envelope_get_resp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_req_envelope_get_resp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_get_response(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_req_envelope(RestF,
                                    0,
                                    0,
                                    F,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    if Prev == undefined -> NewFValue;
                                       true -> merge_msg_get_response(Prev, NewFValue, TrUserData)
                                    end,
                                    TrUserData).

skip_varint_req_envelope(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_req_envelope(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_req_envelope(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_req_envelope(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_req_envelope(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_req_envelope(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_req_envelope(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req_envelope(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_req_envelope(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_req_envelope(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_req_envelope(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_req_envelope(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_req_envelope(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_req_envelope(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_enum_set_response.error_t'(1) -> ok;
'd_enum_set_response.error_t'(2) -> internal;
'd_enum_set_response.error_t'(V) -> V.

'd_enum_get_response.error_t'(1) -> ok;
'd_enum_get_response.error_t'(2) -> not_found;
'd_enum_get_response.error_t'(3) -> internal;
'd_enum_get_response.error_t'(V) -> V.

'd_enum_req_envelope.msg_type'(1) -> set_request_t;
'd_enum_req_envelope.msg_type'(2) -> set_response_t;
'd_enum_req_envelope.msg_type'(3) -> get_request_t;
'd_enum_req_envelope.msg_type'(4) -> get_response_t;
'd_enum_req_envelope.msg_type'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        data -> merge_msg_data(Prev, New, TrUserData);
        set_request -> merge_msg_set_request(Prev, New, TrUserData);
        set_response -> merge_msg_set_response(Prev, New, TrUserData);
        get_request -> merge_msg_get_request(Prev, New, TrUserData);
        get_response -> merge_msg_get_response(Prev, New, TrUserData);
        req_envelope -> merge_msg_req_envelope(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_data/3}).
merge_msg_data(#data{}, #data{key = NFkey, value = NFvalue}, _) -> #data{key = NFkey, value = NFvalue}.

-compile({nowarn_unused_function,merge_msg_set_request/3}).
merge_msg_set_request(#set_request{req = PFreq}, #set_request{req = NFreq}, TrUserData) -> #set_request{req = merge_msg_data(PFreq, NFreq, TrUserData)}.

-compile({nowarn_unused_function,merge_msg_set_response/3}).
merge_msg_set_response(#set_response{}, #set_response{error = NFerror}, _) -> #set_response{error = NFerror}.

-compile({nowarn_unused_function,merge_msg_get_request/3}).
merge_msg_get_request(#get_request{}, #get_request{key = NFkey}, _) -> #get_request{key = NFkey}.

-compile({nowarn_unused_function,merge_msg_get_response/3}).
merge_msg_get_response(#get_response{req = PFreq}, #get_response{error = NFerror, req = NFreq}, TrUserData) ->
    #get_response{error = NFerror,
                  req =
                      if PFreq /= undefined, NFreq /= undefined -> merge_msg_data(PFreq, NFreq, TrUserData);
                         PFreq == undefined -> NFreq;
                         NFreq == undefined -> PFreq
                      end}.

-compile({nowarn_unused_function,merge_msg_req_envelope/3}).
merge_msg_req_envelope(#req_envelope{set_req = PFset_req, set_resp = PFset_resp, get_req = PFget_req, get_resp = PFget_resp}, #req_envelope{type = NFtype, set_req = NFset_req, set_resp = NFset_resp, get_req = NFget_req, get_resp = NFget_resp},
                       TrUserData) ->
    #req_envelope{type = NFtype,
                  set_req =
                      if PFset_req /= undefined, NFset_req /= undefined -> merge_msg_set_request(PFset_req, NFset_req, TrUserData);
                         PFset_req == undefined -> NFset_req;
                         NFset_req == undefined -> PFset_req
                      end,
                  set_resp =
                      if PFset_resp /= undefined, NFset_resp /= undefined -> merge_msg_set_response(PFset_resp, NFset_resp, TrUserData);
                         PFset_resp == undefined -> NFset_resp;
                         NFset_resp == undefined -> PFset_resp
                      end,
                  get_req =
                      if PFget_req /= undefined, NFget_req /= undefined -> merge_msg_get_request(PFget_req, NFget_req, TrUserData);
                         PFget_req == undefined -> NFget_req;
                         NFget_req == undefined -> PFget_req
                      end,
                  get_resp =
                      if PFget_resp /= undefined, NFget_resp /= undefined -> merge_msg_get_response(PFget_resp, NFget_resp, TrUserData);
                         PFget_resp == undefined -> NFget_resp;
                         NFget_resp == undefined -> PFget_resp
                      end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        data -> v_msg_data(Msg, [MsgName], TrUserData);
        set_request -> v_msg_set_request(Msg, [MsgName], TrUserData);
        set_response -> v_msg_set_response(Msg, [MsgName], TrUserData);
        get_request -> v_msg_get_request(Msg, [MsgName], TrUserData);
        get_response -> v_msg_get_response(Msg, [MsgName], TrUserData);
        req_envelope -> v_msg_req_envelope(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_data/3}).
-dialyzer({nowarn_function,v_msg_data/3}).
v_msg_data(#data{key = F1, value = F2}, Path, TrUserData) ->
    v_type_string(F1, [key | Path], TrUserData),
    v_type_string(F2, [value | Path], TrUserData),
    ok;
v_msg_data(X, Path, _TrUserData) -> mk_type_error({expected_msg, data}, X, Path).

-compile({nowarn_unused_function,v_msg_set_request/3}).
-dialyzer({nowarn_function,v_msg_set_request/3}).
v_msg_set_request(#set_request{req = F1}, Path, TrUserData) ->
    v_msg_data(F1, [req | Path], TrUserData),
    ok;
v_msg_set_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, set_request}, X, Path).

-compile({nowarn_unused_function,v_msg_set_response/3}).
-dialyzer({nowarn_function,v_msg_set_response/3}).
v_msg_set_response(#set_response{error = F1}, Path, TrUserData) ->
    'v_enum_set_response.error_t'(F1, [error | Path], TrUserData),
    ok;
v_msg_set_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, set_response}, X, Path).

-compile({nowarn_unused_function,v_msg_get_request/3}).
-dialyzer({nowarn_function,v_msg_get_request/3}).
v_msg_get_request(#get_request{key = F1}, Path, TrUserData) ->
    v_type_string(F1, [key | Path], TrUserData),
    ok;
v_msg_get_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, get_request}, X, Path).

-compile({nowarn_unused_function,v_msg_get_response/3}).
-dialyzer({nowarn_function,v_msg_get_response/3}).
v_msg_get_response(#get_response{error = F1, req = F2}, Path, TrUserData) ->
    'v_enum_get_response.error_t'(F1, [error | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_data(F2, [req | Path], TrUserData)
    end,
    ok;
v_msg_get_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, get_response}, X, Path).

-compile({nowarn_unused_function,v_msg_req_envelope/3}).
-dialyzer({nowarn_function,v_msg_req_envelope/3}).
v_msg_req_envelope(#req_envelope{type = F1, set_req = F2, set_resp = F3, get_req = F4, get_resp = F5}, Path, TrUserData) ->
    'v_enum_req_envelope.msg_type'(F1, [type | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_set_request(F2, [set_req | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_set_response(F3, [set_resp | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_get_request(F4, [get_req | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_get_response(F5, [get_resp | Path], TrUserData)
    end,
    ok;
v_msg_req_envelope(X, Path, _TrUserData) -> mk_type_error({expected_msg, req_envelope}, X, Path).

-compile({nowarn_unused_function,'v_enum_set_response.error_t'/3}).
-dialyzer({nowarn_function,'v_enum_set_response.error_t'/3}).
'v_enum_set_response.error_t'(ok, _Path, _TrUserData) -> ok;
'v_enum_set_response.error_t'(internal, _Path, _TrUserData) -> ok;
'v_enum_set_response.error_t'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_set_response.error_t'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'set_response.error_t'}, X, Path).

-compile({nowarn_unused_function,'v_enum_get_response.error_t'/3}).
-dialyzer({nowarn_function,'v_enum_get_response.error_t'/3}).
'v_enum_get_response.error_t'(ok, _Path, _TrUserData) -> ok;
'v_enum_get_response.error_t'(not_found, _Path, _TrUserData) -> ok;
'v_enum_get_response.error_t'(internal, _Path, _TrUserData) -> ok;
'v_enum_get_response.error_t'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_get_response.error_t'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'get_response.error_t'}, X, Path).

-compile({nowarn_unused_function,'v_enum_req_envelope.msg_type'/3}).
-dialyzer({nowarn_function,'v_enum_req_envelope.msg_type'/3}).
'v_enum_req_envelope.msg_type'(set_request_t, _Path, _TrUserData) -> ok;
'v_enum_req_envelope.msg_type'(set_response_t, _Path, _TrUserData) -> ok;
'v_enum_req_envelope.msg_type'(get_request_t, _Path, _TrUserData) -> ok;
'v_enum_req_envelope.msg_type'(get_response_t, _Path, _TrUserData) -> ok;
'v_enum_req_envelope.msg_type'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_req_envelope.msg_type'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'req_envelope.msg_type'}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'set_response.error_t'}, [{ok, 1}, {internal, 2}]},
     {{enum, 'get_response.error_t'}, [{ok, 1}, {not_found, 2}, {internal, 3}]},
     {{enum, 'req_envelope.msg_type'}, [{set_request_t, 1}, {set_response_t, 2}, {get_request_t, 3}, {get_response_t, 4}]},
     {{msg, data}, [#field{name = key, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []}]},
     {{msg, set_request}, [#field{name = req, fnum = 1, rnum = 2, type = {msg, data}, occurrence = required, opts = []}]},
     {{msg, set_response}, [#field{name = error, fnum = 1, rnum = 2, type = {enum, 'set_response.error_t'}, occurrence = required, opts = []}]},
     {{msg, get_request}, [#field{name = key, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}]},
     {{msg, get_response}, [#field{name = error, fnum = 1, rnum = 2, type = {enum, 'get_response.error_t'}, occurrence = required, opts = []}, #field{name = req, fnum = 2, rnum = 3, type = {msg, data}, occurrence = optional, opts = []}]},
     {{msg, req_envelope},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'req_envelope.msg_type'}, occurrence = required, opts = []},
       #field{name = set_req, fnum = 2, rnum = 3, type = {msg, set_request}, occurrence = optional, opts = []},
       #field{name = set_resp, fnum = 3, rnum = 4, type = {msg, set_response}, occurrence = optional, opts = []},
       #field{name = get_req, fnum = 4, rnum = 5, type = {msg, get_request}, occurrence = optional, opts = []},
       #field{name = get_resp, fnum = 5, rnum = 6, type = {msg, get_response}, occurrence = optional, opts = []}]}].


get_msg_names() -> [data, set_request, set_response, get_request, get_response, req_envelope].


get_group_names() -> [].


get_msg_or_group_names() -> [data, set_request, set_response, get_request, get_response, req_envelope].


get_enum_names() -> ['set_response.error_t', 'get_response.error_t', 'req_envelope.msg_type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(data) -> [#field{name = key, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}, #field{name = value, fnum = 2, rnum = 3, type = string, occurrence = required, opts = []}];
find_msg_def(set_request) -> [#field{name = req, fnum = 1, rnum = 2, type = {msg, data}, occurrence = required, opts = []}];
find_msg_def(set_response) -> [#field{name = error, fnum = 1, rnum = 2, type = {enum, 'set_response.error_t'}, occurrence = required, opts = []}];
find_msg_def(get_request) -> [#field{name = key, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []}];
find_msg_def(get_response) -> [#field{name = error, fnum = 1, rnum = 2, type = {enum, 'get_response.error_t'}, occurrence = required, opts = []}, #field{name = req, fnum = 2, rnum = 3, type = {msg, data}, occurrence = optional, opts = []}];
find_msg_def(req_envelope) ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'req_envelope.msg_type'}, occurrence = required, opts = []},
     #field{name = set_req, fnum = 2, rnum = 3, type = {msg, set_request}, occurrence = optional, opts = []},
     #field{name = set_resp, fnum = 3, rnum = 4, type = {msg, set_response}, occurrence = optional, opts = []},
     #field{name = get_req, fnum = 4, rnum = 5, type = {msg, get_request}, occurrence = optional, opts = []},
     #field{name = get_resp, fnum = 5, rnum = 6, type = {msg, get_response}, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('set_response.error_t') -> [{ok, 1}, {internal, 2}];
find_enum_def('get_response.error_t') -> [{ok, 1}, {not_found, 2}, {internal, 3}];
find_enum_def('req_envelope.msg_type') -> [{set_request_t, 1}, {set_response_t, 2}, {get_request_t, 3}, {get_response_t, 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('set_response.error_t', Value) -> 'enum_symbol_by_value_set_response.error_t'(Value);
enum_symbol_by_value('get_response.error_t', Value) -> 'enum_symbol_by_value_get_response.error_t'(Value);
enum_symbol_by_value('req_envelope.msg_type', Value) -> 'enum_symbol_by_value_req_envelope.msg_type'(Value).


enum_value_by_symbol('set_response.error_t', Sym) -> 'enum_value_by_symbol_set_response.error_t'(Sym);
enum_value_by_symbol('get_response.error_t', Sym) -> 'enum_value_by_symbol_get_response.error_t'(Sym);
enum_value_by_symbol('req_envelope.msg_type', Sym) -> 'enum_value_by_symbol_req_envelope.msg_type'(Sym).


'enum_symbol_by_value_set_response.error_t'(1) -> ok;
'enum_symbol_by_value_set_response.error_t'(2) -> internal.


'enum_value_by_symbol_set_response.error_t'(ok) -> 1;
'enum_value_by_symbol_set_response.error_t'(internal) -> 2.

'enum_symbol_by_value_get_response.error_t'(1) -> ok;
'enum_symbol_by_value_get_response.error_t'(2) -> not_found;
'enum_symbol_by_value_get_response.error_t'(3) -> internal.


'enum_value_by_symbol_get_response.error_t'(ok) -> 1;
'enum_value_by_symbol_get_response.error_t'(not_found) -> 2;
'enum_value_by_symbol_get_response.error_t'(internal) -> 3.

'enum_symbol_by_value_req_envelope.msg_type'(1) -> set_request_t;
'enum_symbol_by_value_req_envelope.msg_type'(2) -> set_response_t;
'enum_symbol_by_value_req_envelope.msg_type'(3) -> get_request_t;
'enum_symbol_by_value_req_envelope.msg_type'(4) -> get_response_t.


'enum_value_by_symbol_req_envelope.msg_type'(set_request_t) -> 1;
'enum_value_by_symbol_req_envelope.msg_type'(set_response_t) -> 2;
'enum_value_by_symbol_req_envelope.msg_type'(get_request_t) -> 3;
'enum_value_by_symbol_req_envelope.msg_type'(get_response_t) -> 4.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"kvbricks.data">>) -> data;
fqbin_to_msg_name(<<"kvbricks.set_request">>) -> set_request;
fqbin_to_msg_name(<<"kvbricks.set_response">>) -> set_response;
fqbin_to_msg_name(<<"kvbricks.get_request">>) -> get_request;
fqbin_to_msg_name(<<"kvbricks.get_response">>) -> get_response;
fqbin_to_msg_name(<<"kvbricks.req_envelope">>) -> req_envelope;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(data) -> <<"kvbricks.data">>;
msg_name_to_fqbin(set_request) -> <<"kvbricks.set_request">>;
msg_name_to_fqbin(set_response) -> <<"kvbricks.set_response">>;
msg_name_to_fqbin(get_request) -> <<"kvbricks.get_request">>;
msg_name_to_fqbin(get_response) -> <<"kvbricks.get_response">>;
msg_name_to_fqbin(req_envelope) -> <<"kvbricks.req_envelope">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"kvbricks.set_response.error_t">>) -> 'set_response.error_t';
fqbin_to_enum_name(<<"kvbricks.get_response.error_t">>) -> 'get_response.error_t';
fqbin_to_enum_name(<<"kvbricks.req_envelope.msg_type">>) -> 'req_envelope.msg_type';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('set_response.error_t') -> <<"kvbricks.set_response.error_t">>;
enum_name_to_fqbin('get_response.error_t') -> <<"kvbricks.get_response.error_t">>;
enum_name_to_fqbin('req_envelope.msg_type') -> <<"kvbricks.req_envelope.msg_type">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> kvbricks.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "kvstore.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["kvstore.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["kvstore"].


get_msg_containment("kvstore") -> [data, get_request, get_response, req_envelope, set_request, set_response];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("kvstore") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("kvstore") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("kvstore") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("kvstore") -> ['get_response.error_t', 'req_envelope.msg_type', 'set_response.error_t'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"kvbricks.data">>) -> "kvstore";
get_proto_by_msg_name_as_fqbin(<<"kvbricks.set_request">>) -> "kvstore";
get_proto_by_msg_name_as_fqbin(<<"kvbricks.get_request">>) -> "kvstore";
get_proto_by_msg_name_as_fqbin(<<"kvbricks.set_response">>) -> "kvstore";
get_proto_by_msg_name_as_fqbin(<<"kvbricks.req_envelope">>) -> "kvstore";
get_proto_by_msg_name_as_fqbin(<<"kvbricks.get_response">>) -> "kvstore";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"kvbricks.set_response.error_t">>) -> "kvstore";
get_proto_by_enum_name_as_fqbin(<<"kvbricks.get_response.error_t">>) -> "kvstore";
get_proto_by_enum_name_as_fqbin(<<"kvbricks.req_envelope.msg_type">>) -> "kvstore";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.9".

gpb_version_as_list() ->
    [4,19,9].

gpb_version_source() ->
    "git".
